Name: Brendan Coutts and David Wu
ID: 1528549 / 1528350
CMPUT 274 Fa18
Final Project: MazeFun

Included Files:
    * mazefun.py
    * game.py
    * simple_generator.py
    * recursive_division.py
    * recursive_backtracker.py
    * startmenu.py
    * ASCII_mazes.py
    * FreeSansBold.ttf
    * README

Accessories:
    None

Instructions:
Run the game from the command line, changing to the correct directory and
entering <python3 mazefun.py> in the terminal. You can skip the intro text
with optional command line arguments <python3 mazefun.py "algorithm", "difficulty">
Replace "algorithm" with a number from 1 to 3, 1 representing the Prim's based
algorithm, 2 representing Recursive Division and 3 representing Recursive Backtracker.
Replace "difficulty" with either 1 or 2 representing easy and hard respectively.
As stated in the menu, Hard is extremely challenging so we recommend that all users
begin with the Easy difficulty.

Purpose: 
An educational game that uses one of three maze generation algorithms to create
a playable maze. 

Process:
Our intention from the start was to create a program that used mazes. We thought it
would be an excellent way to introduce algorithmic complexity into our project in a
challenging manner. Our original ideas centered around developing a maze generation
program, or alternatively a maze solving program. Although these would have been
algorithmically involved projects, we eventually decided on incorporating an
interactive element into our project and that is where MazeFun originated.

We began by researching different possible algorithms to use for our game, and
came to the conclusion that a single algorithm was not enough. The breadth and
diversity in the strategies for automated, randomized generation warranted the
implementation of multiple algorithms. This redirected our project into an
educational angle - the user will be presented with a choice of algorithm, will
then learn about the algorithm, and finally play a game based on that algorithm.

Inspired by a Pac-Man style game we applied our knowledge from the PVC MOOC to create
a Pygame based maze solving game where the user will be challenged by a flying
enemy to work their way safely from the begining of the maze to the end. While playing
the user is encouraged to watch for characteristics of the particular algorithm that
they had chosen, as these attributes allow the user to chart a more efficient course
through the maze, ultimately improving their chances of success.

Citations:
The following pages were used in researching various maze generation algorithms:
    * https://en.wikipedia.org/wiki/Maze_generation_algorithm
    * http://weblog.jamisbuck.org/2011/1/12/maze-generation-recursive-division-algorithm
    * https://weblog.jamisbuck.org/2010/12/27/maze-generation-recursive-backtracking

Attributions can be found in specific location in the files where code was borrowed
from other sources. These instances are also listed below. Apart from these locations
all code is original for MazeFun.
   * The draw_maze function which was used in each of the generators during testing
     to visualize the mazes was sourced from sample code on the Wikipedia page for 
     Maze Generation: https://en.wikipedia.org/wiki/Maze_generation_algorithm
     This code is not utilized in the final version of MazeFun. It was only used
     in the development process
   * The ASCII Art used in the title of the menu was sourced from the following:
     http://patorjk.com/software/taag/#p=display&f=Doom&t=MazeFun
   * The function print_bold used in startmenu.py was based on:
     https://stackoverflow.com/questions/8924173/how-do-i-print-bold-text-in-python
   * The function one_at_a_time used in startmenu.py was based on:
     https://stackoverflow.com/questions/9246076/how-to-print-one-character-at-a-time-on-one-line
   
     